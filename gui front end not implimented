import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public class GUIFrontEnd extends JFrame {
    private static final String ACCOUNT_FILE = "storedaccounts.csv";
    private JTextField userIdField, passwordField;
    private JTextArea messageArea;
    private JButton loginButton, signUpButton, sendMessageButton, viewMembersButton, exitButton;
    private String userId, userPassword;

    public GUIFrontEnd() {
        // Set up the frame
        setTitle("Chat System - GUI");
        setSize(500, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // Login panel
        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayout(3, 2));
        loginPanel.add(new JLabel("User ID:"));
        userIdField = new JTextField();
        loginPanel.add(userIdField);
        loginPanel.add(new JLabel("Password:"));
        passwordField = new JTextField();
        loginPanel.add(passwordField);
        loginButton = new JButton("Login");
        signUpButton = new JButton("Sign Up");
        loginPanel.add(loginButton);
        loginPanel.add(signUpButton);
        add(loginPanel, BorderLayout.NORTH);

        // Text area to show messages
        messageArea = new JTextArea();
        messageArea.setEditable(false);
        add(new JScrollPane(messageArea), BorderLayout.CENTER);

        // Menu panel
        JPanel menuPanel = new JPanel();
        menuPanel.setLayout(new GridLayout(2, 2));
        sendMessageButton = new JButton("Send Message");
        viewMembersButton = new JButton("View Members");
        exitButton = new JButton("Exit");
        menuPanel.add(sendMessageButton);
        menuPanel.add(viewMembersButton);
        menuPanel.add(exitButton);
        add(menuPanel, BorderLayout.SOUTH);

        // Action Listeners
        loginButton.addActionListener(e -> login());
        signUpButton.addActionListener(e -> signUp());
        sendMessageButton.addActionListener(e -> sendMessage());
        viewMembersButton.addActionListener(e -> viewMembers());
        exitButton.addActionListener(e -> exit());

        // Hide menu options until user logs in
        hideMenu();
    }

    private void login() {
        userId = userIdField.getText();
        userPassword = passwordField.getText();

        if (authenticate(userId, userPassword)) {
            messageArea.setText("Login successful!\n");
            showMenu();
        } else {
            messageArea.setText("Invalid credentials. Please try again.\n");
        }
    }

    private boolean authenticate(String id, String password) {
        try (BufferedReader reader = new BufferedReader(new FileReader(ACCOUNT_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] credentials = line.split(",");
                if (credentials.length == 2 && credentials[0].equals(id) && credentials[1].equals(password)) {
                    return true;
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading accounts file: " + e.getMessage());
        }
        return false;
    }

    private void signUp() {
        userId = userIdField.getText();
        userPassword = passwordField.getText();

        if (addAccount(userId, userPassword)) {
            messageArea.setText("Account created successfully! You can now log in.\n");
        } else {
            messageArea.setText("Error: Could not create account.\n");
        }
    }

    private boolean addAccount(String id, String password) {
        try (FileWriter writer = new FileWriter(ACCOUNT_FILE, true)) {
            writer.write(id + "," + password + "\n");
            return true;
        } catch (IOException e) {
            System.err.println("Error writing to accounts file: " + e.getMessage());
        }
        return false;
    }

    private void sendMessage() {
        String message = JOptionPane.showInputDialog(this, "Enter your message:");
        if (message != null && !message.trim().isEmpty()) {
            messageArea.append(userId + " says: " + message + "\n");

            String timeStamp = new SimpleDateFormat("yyyy/MM/dd_HH:mm:ss").format(Calendar.getInstance().getTime());
            String formattedMessage = System.lineSeparator() + "-" + timeStamp + ":" + userId + " says: " + message;
            Path p = Paths.get("chat.txt");

            try {
                Files.write(p, formattedMessage.getBytes(), StandardOpenOption.APPEND);
            } catch (IOException e) {
                messageArea.append("An error occurred while writing the message: " + e + "\n");
            }
        }
    }

    private void viewMembers() {
        messageArea.append("Active Members: User1, User2, User3\n");
    }

    private void exit() {
        int confirmExit = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Confirm Exit", JOptionPane.YES_NO_OPTION);
        if (confirmExit == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    private void showMenu() {
        // Hide login panel
        userIdField.setEnabled(false);
        passwordField.setEnabled(false);
        loginButton.setEnabled(false);
        signUpButton.setEnabled(false);

        // Show menu panel
        sendMessageButton.setEnabled(true);
        viewMembersButton.setEnabled(true);
        exitButton.setEnabled(true);
    }

    private void hideMenu() {
        sendMessageButton.setEnabled(false);
        viewMembersButton.setEnabled(false);
        exitButton.setEnabled(false);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            GUIFrontEnd gui = new GUIFrontEnd();
            gui.setVisible(true);
        });
    }
}
